#!/usr/bin/env bash

ST_DIR=`dirname $0`
APPS=
UPDATE=
REBUILD=
START=
VERBOSE=

. $ST_DIR/env.conf

function handleError(){
  echo "ERROR - Something went wrong during $1"
  echo "ERROR - Please check the log file for more details!"
  exit 1
}

function printHelp(){
  echo "Application starter scripts to simplify stubbed environment startup."
  echo "Usage: $0 [-s] [-r] [-u] [-v] app [app..]"
  echo "Parameters:"
  echo "-s            start application"
  echo "-r            rebuild application"
  echo "-u            update application from master branch"
  echo "-u=<branch>   update application from <branch>"
  echo "-v            verbose logging"
  echo "-k            terminate application"
  echo "app           list of applications. Available values: apache, stub, ba, hwa, cap, dio, mvt, ui_test"
  echo
  exit 0
}

function displaytime() {
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))
  (( $D > 0 )) && printf '%d days ' $D
  (( $H > 0 )) && printf '%d hours ' $H
  (( $M > 0 )) && printf '%d minutes ' $M
  (( $D > 0 || $H > 0 || $M > 0 )) && (( $S > 0 )) && printf 'and '
  (( $S > 0)) && printf '%d seconds\n' $S
}

function checkForUpdates(){
  TEMPFILE='/tmp/lastrun.tmp'
  if [ ! -f $TEMPFILE ]; then
    date +%s >$TEMPFILE
  fi
  LASTRUNTIME=$(cat /tmp/lastrun.tmp)
  CURRENTRUNTIME=`date +%s`
  DIFF=`expr $CURRENTRUNTIME - $LASTRUNTIME`
  LIMITTIME=600
  DISPLAYTIME=$(displaytime $DIFF)
  echo "Last check for updates was $DISPLAYTIME ago. I'll check for new versions only once in every $(displaytime $LIMITTIME)"
  if [ $DIFF -gt $LIMITTIME ]; then
    date +%s >$TEMPFILE
    echo "Checking for updates..."
    pushd . &> /dev/null
    cd "$ST_DIR"
    git fetch origin master &> /dev/null
    updates=`git status master -sb`
    if [[ "$updates" == *behind* ]]; then
      echo "Updates available. Please get the latest version"
      echo "$updates"
      exit 1
    fi
  fi
}

#checkForUpdates

for p in $@;
do
  case ${p} in
    -h) printHelp ;;
    -r) REBUILD=true ;;
    -s) START=true ;;
    -u) UPDATE=master ;;
    -k) TERMINATE=true ;;
    -u=*) UPDATE=`echo "$p" | sed -e 's/^-u=//'` ;;
    -v) export VERBOSE=true ;;
    *) APPS="$APPS $p"
  esac
done
[ $VERBOSE ] && echo -e "Apps: $APPS\nRebuild apps: ${REBUILD:-false}\nStart apps: ${START:-false}Update branch:$UPDATE\n\n"

if [ $TERMINATE ]; then
  echo -e "\n${COLOR_HEADER} Terminating apps ${COLOR_RESET}"
  for app in $APPS;
  do
    [ $VERBOSE ] && echo "Terminating app: $app"
    $ST_DIR/terminate_app $app
  done
fi

if [ $UPDATE ]; then
  echo -e "\n${COLOR_HEADER} Updating apps ${COLOR_RESET}"
  for app in $APPS;
  do
    [ $VERBOSE ] && echo "Updating app: $app"
    $ST_DIR/version_control_update $app $UPDATE || handleError "updating $app"
  done
fi

if [ $REBUILD ]; then
  echo -e "\n${COLOR_HEADER} Rebuilding apps ${COLOR_RESET}"
  for app in $APPS;
  do
    [ $VERBOSE ] && echo "Rebuilding app: $app"
    $ST_DIR/rebuild_app $app || handleError "rebuilding $app"
  done
fi

if [ $START ]; then
  echo -e "\n${COLOR_HEADER} Starting apps ${COLOR_RESET}"
  for app in $APPS;
  do
    [ $VERBOSE ] && echo "Starting app: $app"
    $ST_DIR/start_app $app || handleError "starting $app"
  done
fi
